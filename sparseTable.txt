// Range min | max | GCD Query (Any operation which is idempotent can be solved in O(1))

const int mxN = 2e5 + 3;

vector<int> lg2(mxN);

void preCal(){
	lg2[1] = 0;
	for(int i=2 ; i<mxN ; ++i){
		lg2[i] = 1 + lg2[i/2];
	}
}

struct RMQ{
	vector<vector<int> > V;
	
	void precompute(int N, const vector<int> &A){
		int K = lg2[N] + 1;
		debug(K);
		V = vector<vector<int> > (K, vector<int>(N+1));
		for(int j=0 ; j<N ; ++j)V[0][j] = A[j];
		for(int i=1 ; i<K ; ++i){
			for(int j=0 ; j+(1<<i)<=N ; ++j){
				V[i][j] = min(V[i-1][j], V[i-1][j+(1<<(i-1))]);
			}
		}
	}
	
	int getMin(int L, int R){
		int lg = lg2[R - L + 1];
		int mn = min(V[lg][L], V[lg][R - (1 << lg) + 1]);
		
		return mn;
	}
};