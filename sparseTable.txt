// Range min | max | GCD Query (Any operation which is idempotent can be solved in O(1))

int lg2[mxN+1];
lg2[1] = 0;
for (int i = 2; i <= mxN; i++){
	lg2[i] = lg2[i/2] + 1;
}

struct RMQ{
	vvll v;
	
	void precompute(ll n, vll a){
		ll K = lg2[mxN] + 1;
		v = vvll(mxN, vll(K));
		
		for(int i=0 ; i<n ; ++i){
			v[i][0] = a[i];
		}
		
		for(int j=1 ; j<=K ; ++j){
			for(int i=0 ; i+(1<<j)<=n ; ++i){
				v[i][j] = min(v[i][j-1], v[i+(1<<(j-1))][j-1]);
			}
		}
	}
	
	ll getMin(ll l, ll r){
		ll j = lg2[r - l + 1];
		ll mn = min(v[l][j], v[r - (1 << j) + 1][j]);
		
		return mn;
	}
};
