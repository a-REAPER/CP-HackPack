// inverse of a number is mpow(x, mod-2)

const int mxN = 1e5+10;

long long mpow(long long a, long long b) { /* pow(a, b) % m */
  long long x = 1;
  while (b > 0) {
    if (b & 1) { /* fast way of checking if b is odd */
      x = (x * a) % mod;
    }
    a = (a * a) % mod; /* compute the next power of 2 */
    b >>= 1; /* this is equivalent to b = floor(b / 2) */
  }
  return x;
}

long long fact[mxN + 1];
long long ifact[mxN + 1];
long long inverse[mxN + 1];
void init(){
	fact[0] = fact[1] = 1;
	for (int i = 2; i <= mxN; i++) {
	  fact[i] = (fact[i - 1] * i) % mod;
	}
	
	ifact[mxN] = mpow(fact[mxN], mod - 2);
	for (int i = mxN - 1; i >= 0; i--) {
	  ifact[i] = ((i + 1) * ifact[i + 1]) % mod;
	}

	for (int i = 1; i <=mxN; i++) {
	  inverse[i] = (fact[i - 1] * ifact[i]) % mod;
	}
}

ll nck(ll n, ll k){
	ll mul = fact[n];
	mul = (mul * ifact[k]) % mod;
	mul = (mul * ifact[n-k]) % mod;
	
	return mul;
}

ll npk(ll n, ll k){
	ll mul = fact[n];
	mul = (mul * ifact[n-k]) % mod;
	
	return mul;
}
